<?php

/**
 * @file
 * Photoswipe integration with Backdrop module.
 */

/**
 * Implements hook_menu().
 */
function photoswipe_menu() {
  $items = array();

  $items['admin/config/media/photoswipe'] = array(
    'title' => 'PhotoSwipe',
    'description' => 'Adjust PhotoSwipe settings.',
    'file' => 'photoswipe.admin.inc',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('photoswipe_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function photoswipe_theme() {
  return array(
    'photoswipe_imagefield' => array(
      'variables' => array(
        'image' => array(),
        'path' => NULL,
        'dimension' => NULL,
        'title' => NULL,
        'gid' => NULL,
      ),
      'file' => 'photoswipe.theme.inc',
    ),
    'photoswipe_image_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'node' => NULL,
        'field' => array(),
        'display_settings' => array(),
        'delta' => NULL,
      ),
      'file' => 'photoswipe.theme.inc',
    ),
    'photoswipe_container' => array(
      'variables' => array(),
      'file' => 'photoswipe.theme.inc',
      'template' => 'photoswipe-container',
    ),
  );
}

/**
 * Implements hook_config_info().
 */
function photoswipe_config_info() {
  $prefixes['photoswipe.settings'] = array(
    'label' => t('Photoswipe settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_preprocess_page().
().
 */

function photoswipe_preprocess_page(&$variables) {
  if (config_get('photoswipe.settings', 'photoswipe_always_load_non_admin') && !path_is_admin(current_path())) {
    photoswipe_load_assets();
  }
  if (photoswipe_assets_loaded()) {
    $variables['page_bottom'] .= theme ('photoswipe_container', $variables);
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function photoswipe_field_formatter_info() {
  return array(
    'photoswipe' => array(
      'label' => t('Photoswipe'),
      'field types' => array('image'),
      'settings' => array(
        'photoswipe_node_style_first' => '',
        'photoswipe_node_style' => '',
        'photoswipe_image_style' => '',
        'photoswipe_caption' => '',
        'photoswipe_view_mode' => '',
        'photoswipe_gallery_mode' => TRUE
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function photoswipe_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $image_styles = image_style_options(FALSE);
  $image_styles_hide = $image_styles;
  $image_styles_hide['hide'] = t('Hide (do not display image)');
  $element['photoswipe_node_style_first'] = array(
    '#title' => t('Node image style for first image'),
    '#type' => 'select',
    '#default_value' => $settings['photoswipe_node_style_first'],
    '#empty_option' => t('No special style.'),
    '#options' => $image_styles_hide,
    '#description' => t('Image style to use in the content for the first image.'),
  );
  $element['photoswipe_node_style'] = array(
    '#title' => t('Node image style'),
    '#type' => 'select',
    '#default_value' => $settings['photoswipe_node_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles_hide,
    '#description' => t('Image style to use in the node.'),
  );
  $element['photoswipe_image_style'] = array(
    '#title' => t('Photoswipe image style'),
    '#type' => 'select',
    '#default_value' => $settings['photoswipe_image_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
    '#description' => t('Image style to use in the Photoswipe.'),
  );

  // Set our caption options
  $caption_options = array(
    'alt' => t('Image Alt Tag'),
    'title' => t('Image Title Tag'),
    'node_title' => t('Node Title'),
  );
  // Add node text fields as options.
  if(isset($form['#fields'])) {
    foreach ($form['#fields'] as $node_field_name) {
      if (is_text_field($node_field_name)) {
        // Get info about this field instance.
        $field_info = field_info_instance(
          $instance['entity_type'],
          $node_field_name,
          $instance['bundle']
        );
        // Add this field as an option.
        $caption_options[$node_field_name] = $field_info['label'];
      }
    }
  }
  // If in view then add captions from view text fields.
  if(isset($form_state['view'])) {
    // Get list of view fields.
    $fields = $form_state['view']->display_handler->get_handlers('field');
    // Add text fields as caption options.
    foreach($fields as $field_name => $field){
      if(is_text_field($field_name))
        $caption_options[$field_name] = $field->ui_name();
    }
  }

  $element['photoswipe_caption'] = array(
    '#title' => t('Photoswipe image caption'),
    '#type' => 'select',
    '#default_value' => ($settings['photoswipe_caption']) ? $settings['photoswipe_caption'] : 'alt',
    '#options' => $caption_options,
    '#description' => t('Field that should be used for the caption.'),
  );

  // Add the current view mode so we can control the view mode for node fields.
  $element['photoswipe_view_mode'] = array(
    '#type' => 'hidden',
    '#value' => $view_mode,
  );
  $element['photoswipe_gallery_mode'] = array(
    '#title' => t('Gallery display'),
    '#type' => 'checkbox',
    '#default_value' => isset($settings['photoswipe_gallery_mode']) ? $settings['photoswipe_gallery_mode'] : TRUE,
    '#description' => t('Display images as a Photoswipe Gallery.'),
  );

  return $element;
}

/*
 * Checks if given field name belongs to one of the text type fields.
 */
function is_text_field($field_name) {
  $field_info = field_info_field($field_name);
  $text_check = '';
  if (isset($field_info['type'])) {
    $text_types = array('text', 'text_long', 'text_with_summary');
    $text_check = in_array($field_info['type'], $text_types);
  }
  return $text_check;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function photoswipe_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['photoswipe_node_style']])) {
    $summary[] = t('Node image style: @style', array('@style' => $image_styles[$settings['photoswipe_node_style']]));
  }
  else if ($settings['photoswipe_node_style'] == 'hide') {
    $summary[] = t('Node image style: Hide');
  }
  else {
    $summary[] = t('Node image style: Original image');
  }
  if (isset($image_styles[$settings['photoswipe_node_style_first']])) {
    $summary[] = t('Node image style of first image: @style', array('@style' => $image_styles[$settings['photoswipe_node_style_first']]));
  }

  if (isset($image_styles[$settings['photoswipe_image_style']])) {
    $summary[] = t('Photoswipe image style: @style', array('@style' => $image_styles[$settings['photoswipe_image_style']]));
  }
  else {
    $summary[] = t('Photoswipe image style: Original image');
  }

  if (isset($settings['photoswipe_caption'])) {
    $caption_options = array(
      'alt' => t('Image Alt Tag'),
      'title' => t('Image Title Tag'),
      'node_title' => t('Node Title'),
    );
    if (array_key_exists($settings['photoswipe_caption'], $caption_options)) {
      $caption_setting = $caption_options[$settings['photoswipe_caption']];
    }
    else {
      $caption_setting = $settings['photoswipe_caption'];
    }
    $summary[] = t('Photoswipe Caption: @field', array('@field' => $caption_setting));
  }
  else {
    $summary[] = t('Photoswipe Caption: Image Alt Tag');
  }
  if (isset($settings['photoswipe_gallery_mode'])
    && ($settings['photoswipe_gallery_mode'] == FALSE )) {
    $summary[] = t('Gallery: No');
  }
  else {
    $summary[] = t('Gallery: Yes');
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function photoswipe_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if (!empty($items)) {
    photoswipe_load_assets();
    // set container class to show a gallery.
    $container_class = 'photoswipe-gallery';
    // except if 'photoswipe_gallery_mode' does not exist or is FALSE.
    if (isset($instance['display']['default']['settings']['photoswipe_gallery_mode'])
      && ($instance['display']['default']['settings']['photoswipe_gallery_mode'] == FALSE))
      { $container_class = 'display-as-single'; }
    $element = array(
      '#type' => 'container',
      '#attributes' => array('class' => array($container_class)),
    );
  }

  foreach ($items as $delta => $item) {
    $element[$delta] = array(
      '#theme' => 'photoswipe_image_formatter',
      '#item' => $item,
      '#node' => $entity,
      '#field' => $field,
      '#display_settings' => $display['settings'],
      '#delta' => $delta,
    );
  }

  return $element;
}

/**
 * Loads photoswipe assets.
 */
function photoswipe_load_assets() {

  $module_path = backdrop_get_path('module', 'photoswipe');
  // Load PhotoSwipe scripts and default stylesheet.
  // Obtained from https://github.com/dimsemenov/PhotoSwipe
  backdrop_add_js($module_path . '/library/photoswipe.min.js');
  backdrop_add_css($module_path . '/library/photoswipe.css');
  backdrop_add_js($module_path . '/library/photoswipe-ui-default.min.js');
  backdrop_add_css($module_path . '/library/default-skin/default-skin.css');

  // Load this module's script
  backdrop_add_js(backdrop_get_path('module', 'photoswipe') . '/js/photoswipe.jquery.js', array('scope' => 'footer'));

  $settings = config_get('photoswipe.settings','photoswipe_settings');
  backdrop_add_js(array(
    'photoswipe' => array(
      'options' => $settings,
    ),
  ), array('type' => 'setting', 'scope' => JS_DEFAULT));
  photoswipe_assets_loaded(TRUE);
}

/**
 * Stores whether photoswipe assets has been loaded in the same request.
 *
 * @param bool $loaded
 *   (Optional) Set whether assets are loaded or not.
 *
 * @return bool
 */
function photoswipe_assets_loaded($loaded = NULL) {
  $status = &backdrop_static(__FUNCTION__);

  if ($loaded) {
    $status = $loaded;
  }

  return $status;
}

/**
 * Get photoswipe default settings.
 *
 * @see http://photoswipe.com/documentation/options.html
 */
function photoswipe_get_default_settings() {
  $settings = array(
    //'index' => 0,
    //'getThumbBoundsFn' => NULL,
    'showAnimationDuration' => 333,
    'hideAnimationDuration' => 333,
    'showHideOpacity' => FALSE,
    'bgOpacity' => 1,
    'spacing' => 0.12,
    'allowPanToNext' => TRUE,
    'maxSpreadZoom' => 2,
    //'getDoubleTapZoom' => NULL,
    'loop' => TRUE,
    'pinchToClose' => TRUE,
    'closeOnScroll' => TRUE,
    'closeOnVerticalDrag' => TRUE,
    'mouseUsed' => FALSE,
    'escKey' => TRUE,
    'arrowKeys' => TRUE,
    'history' => TRUE,
    //'galleryUID' => 1,
    'errorMsg' => '<div class="pswp__error-msg">' . t('<a href="%url%" target="_blank">The image</a> could not be loaded.') . '</div>',
    'preload' => array(1, 1),
    'mainClass' => NULL,
    //'getNumItemsFn' => NULL,
    'focus' => TRUE,
    //'isClickableElement' => NULL,
  );

  // Add ability to override default settings using hook_photoswipe_default_settings_alter().
  backdrop_alter('photoswipe_default_settings', $settings);

  return $settings;
}

/**
 * Implements hook_theme_registry_alter().
 */
function photoswipe_theme_registry_alter(&$theme_registry) {
  // Defined path to the current module's 'templates' directory.
  $module_path = backdrop_get_path('module', 'photoswipe') . '/templates';

  // Find all *.tpl.php files in this module's 'templates' folder recursively.
  $template_file_objects = backdrop_find_theme_templates($theme_registry, '.tpl.php', $module_path);

  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme...
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}

/**
 * Implements template_preprocess_views_view().
 * Checks if photoswipe is being used in a view.
 */
function photoswipe_preprocess_views_view(&$variables) {
  // Set view container's default class name.
  $variables['div_class'] = 'view-content';

  $view = $variables['view'];
  // Get handlers for fields used in this view.
  $fields = $view->display_handler->get_handlers('field');

  foreach ($fields as $field) {
    // Ignore excluded fields.
    if (!empty($field->options['exclude']))
      continue;
    // Check if the field has option type 'photoswipe'.
    if (isset($field->options['type'])) {
      // If a field uses photoswipe then add photoswipe gallery class to the view.
      if ($field->options['type'] == 'photoswipe') {
        $variables['div_class'] = 'view-content photoswipe-gallery';
        // except if 'photoswipe_gallery_mode' exists and is FALSE.
        if (isset($field->options['settings']['photoswipe_gallery_mode'])
          && $field->options['settings']['photoswipe_gallery_mode'] == FALSE) {
            $variables['div_class'] = 'view-content';
          }
        }
      }
    }
  }



